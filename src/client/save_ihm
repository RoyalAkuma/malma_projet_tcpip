void init_wins(WINDOW **wins, int n);
void win_show(WINDOW *win, char *label, int label_color);
void print_in_middle(WINDOW *win, int starty, int startx, int width, char *string, chtype color);

int main()
{   
    int NLINES,NCOLS;
    getmaxyx(stdscr,NLINES,NCOLS);
    WINDOW *my_wins[2];
    PANEL  *my_panels[2];
    PANEL  *top;
    FIELD *field[1];
    FORM  *my_form;
    

    int ch;

    /* Initialize curses */
    initscr();
    start_color();
    cbreak();
    noecho();
    keypad(stdscr, TRUE);

    /* Initialize all the colors */
    init_pair(1, COLOR_RED, COLOR_BLACK);
    init_pair(2, COLOR_GREEN, COLOR_BLACK);
    init_pair(3, COLOR_BLUE, COLOR_BLACK);
    init_pair(4, COLOR_CYAN, COLOR_BLACK);

    init_wins(my_wins, 2);

    field[0] = new_field(1, 10, 6, 1, 0, 0);
    set_field_back(field[0], A_UNDERLINE);
    field_opts_off(field[0], O_AUTOSKIP); /* Don't go to next field when this */
                          /* Field is filled up         */
    /* Create the form and post it */
    my_form = new_form(field);
    
    
    /* Calculate the area required for the form */
    scale_form(my_form, &NLINES, &NCOLS);
    /* Set main window and sub window */
        set_form_win(my_form,my_wins[0] );
        set_form_sub(my_form, derwin(my_wins[1], NLINES, NCOLS, 10 , 10));
    
    /* Attach a panel to each window */     /* Order is bottom up */
    my_panels[0] = new_panel(my_wins[0]);   /* Push 0, order: stdscr-0 */
    my_panels[1] = new_panel(my_wins[1]);   /* Push 1, order: stdscr-0-1 */
    //my_panels[2] = new_panel(my_wins[2]);   /* Push 2, order: stdscr-0-1-2 */
        box(my_wins[1], 0, 0);
    /* Set up the user pointers to the next panel */
    set_panel_userptr(my_panels[1], my_panels[1]);
    //set_panel_userptr(my_panels[2], my_panels[0]);
    post_form(my_form);
    /* Update the stacking order. 2nd panel will be on top */
    update_panels();
    /* Show it on the screen */
    attron(COLOR_PAIR(4));
    //mvprintw(LINES - 2, 0, "(F2 to Exit) (Type your message or your command)");
    attroff(COLOR_PAIR(4));
    doupdate();

    top = my_panels[1];
    while((ch = wgetch(my_wins[1])) != KEY_F(2))

    {   
        refresh();
        switch(ch)
        {   
            default:
                /* If this is a normal character, it gets */
                /* Printed                */    
                form_driver(my_form, ch);
                break;
            

        }
        update_panels();
        doupdate();
    }
    endwin();
    return 0;
}

/* Put all the windows */
void init_wins(WINDOW **wins,int n)
{   int x, y, i;
    int NLINES,NCOLS;
    getmaxyx(stdscr,NLINES,NCOLS);
    char label[80];
    wins[0] = newwin(NLINES/3 * 2, NCOLS, 0, 0);
    sprintf(label, "--- Messages ---");
    win_show(wins[0], label, 1);

    if(10 < NLINES/3)
        wins[1] = newwin(10, NCOLS, NLINES/3*2, 0);
    else
        wins[1] = newwin(NLINES/3, NCOLS, NLINES/3*2, 0);
    sprintf(label, "--- Command prompt --- ");
    win_show(wins[1], label, 2);
}

/* Show the window with a border and a label */
void win_show(WINDOW *win, char *label, int label_color)
{   int startx, starty, height, width;
    getbegyx(win, starty, startx);
    getmaxyx(win, height, width);
    box(win, 0, 0);
    mvwaddch(win, 2, 0, ACS_LTEE); 
    mvwhline(win, 2, 1, ACS_HLINE, width - 2); 
    mvwaddch(win, 2, width - 1, ACS_RTEE); 
    print_in_middle(win, 1, 0, width, label, COLOR_PAIR(label_color));
}

void print_in_middle(WINDOW *win, int starty, int startx, int width, char *string, chtype color)
{   int length, x, y;
    float temp;

    if(win == NULL)
        win = stdscr;
    getyx(win, y, x);
    if(startx != 0)
        x = startx;
    if(starty != 0)
        y = starty;
    if(width == 0)
        width = 80;

    length = strlen(string);
    temp = (width - length)/ 2;
    x = startx + (int)temp;
    wattron(win, color);
    mvwprintw(win, y, x, "%s", string);
    wattroff(win, color);
    refresh();
}